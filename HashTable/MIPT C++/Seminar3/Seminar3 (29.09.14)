#include <iostream>
/* bool isLess (int Lhs, int rhs)
 {
     return Lhs<rhs;
 }
 
or
 bool
 operator < (int Lhs, int rhs){
 return Lhs<rhs;
 }
*/

/*
 freopen("output.txt", "w", stdout);
 cout   \
         > output.txt
 printf /
 freopen("input.txt", "r", stdin);
 cin
 scanf
 */
/*
 #include <time.h>
 GetTickCount
 */
#include <time.h>
int getBit(int a, int bit);
float sum (float *curr, int sz);
template <class T>
void insertionSort(T* arr, int size);
template <class T>
void selectSort(T* arr, int size);
template <class T>
void bubbleSort(T* arr, int size);

int main(){
    std::cout<<time(0)<<std::endl;
    std::cout<<time(0)<<std::endl;
    int N = 100000000;
    float sum = 0;
    for (int i = 0; i < N; i++) sum += 1/i /i;
    return 0;
}


int getBit(int a, int bit){
    return (a>>bit)&1;
}
float sum (float *arr, int sz){
    //arr[i] = 1/i /i
    float sum = 0, correction = 0;
    for (int i = 0; i < sz; i++){
        // float temp = arr[i] - correction;
        float temp = 1/i /i -correction;
        float tempSum = sum + temp;
        correction = (tempSum - sum) - temp;
        sum = tempSum;
    }
    return sum + correction;
}



'r' - возврат коретки

struct myAwesomeStruct {
int a, b, c;
}; //or }[declarators];
