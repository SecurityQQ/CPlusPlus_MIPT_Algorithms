#include <iostream>

#define part partitionByMiddle(arr, startOfPartition, endOfPartition - 1, compInt)
#define YES true
#define NO false
using namespace std;

bool compInt (int &p, int &p2) {
return p < p2;
}

template <typename T>
T middle(T *arr, T &var1, T &var2, T &var3, bool comp(T &firstCompElement, T &secondCompElement));
template <typename T>
int partitionByMiddle (T* arr, int l, int r, bool comp(T &firstCompElement, T &secondCompElement));

int findKStat(int * arr, int l, int r, int k);

//const char *inputFilePath = "/Users/Security/Desktop/MIPT C++/MIPT C++/input.txt";
//const char *output
//FilePath = "/Users/Security/Desktop/MIPT C++/MIPT C++/output.txt";
void show(int *arr, int n) {
for (int i = 0; i < n ; ++i) {
printf("%d ", arr[i]);
}
printf("\n");
}
int main() {
int n, k;
scanf("%d %d", &n, &k);
int * arr = (int *) malloc (n * sizeof(int));
for (int i = 0 ; i < n; ++i) {
scanf("%d", &arr[i]);
}
int startOfPartition = 0, endOfPartition = n;
int p = part;
while (YES) {
if (p == k) break;
else {
if (p > k) {
endOfPartition = p;
p = part;
}
else {
startOfPartition = p + 1;
p = part;
}
}

}

printf("%d", arr[p]);
return 0;
}

template <typename T>
int partitionByMiddle (T* arr, int l, int r, bool comp(T &firstCompElement, T &secondCompElement)) {
int mid = (l >> 1) + (r >> 1);
int piv = middle(arr, l, r, mid, compInt);
swap (arr[piv], arr[r]);
int i = l - 1;
int j = r;
T x = arr[r];
while (YES) {
while (arr[++i] < x);
while (arr[--j] > x);
if (i < j) {
swap (arr[i], arr[j]);
}
else
{
if (j < r ) {
swap(arr[r], arr[j + 1]);
return j + 1;
}

else  {
return r;
}
}
}
}

template <typename T>
T middle(T *arr, T &var1, T &var2, T &var3, bool comp(T &firstCompElement, T &secondCompElement)) {
if ((comp(arr[var1], arr[var2]) && comp(arr[var2], arr[var3])) || ((comp(arr[var3], arr[var2]) && comp(arr[var2], arr[var1])))) return var2;
if ((comp(arr[var2], arr[var1]) && comp(arr[var1], arr[var3])) || ((comp(arr[var3], arr[var1]) && comp(arr[var1], arr[var2])))) return var1;
if ((comp(arr[var1], arr[var3]) && comp (arr[var3], arr[var2])) || ((comp(arr[var2], arr[var3]) && comp (arr[var3], arr[var1]))))  return var3;
return var2;
}
